<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>R some blog</title>
    <link>https://rpahl.github.io/r-some-blog/</link>
    <atom:link href="https://rpahl.github.io/r-some-blog/index.xml" rel="self" type="application/rss+xml"/>
    <description>Some hopefully useful (or even awesome) stuff related to R programming.
</description>
    <image>
      <title>R some blog</title>
      <url>https://rpahl.github.io/r-some-blog/images/meatwork-toon-close.jpg</url>
      <link>https://rpahl.github.io/r-some-blog/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Sat, 21 Dec 2024 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Introducing the {pipeflow} package</title>
      <link>https://rpahl.github.io/r-some-blog/posts/2024-12-21-introducing-pipeflow</link>
      <description>


&lt;p&gt;In this post, we’ll contrast the traditional approach with
{pipeflow}, showcasing how it empowers users to build robust workflows
while reducing complexity. Let’s dive in!&lt;/p&gt;
&lt;aside&gt;
&lt;img src="https://rpahl.github.io/r-some-blog//posts/2024-12-21-introducing-pipeflowlogo.png" width="100%" /&gt;
&lt;/aside&gt;
&lt;h3 id="the-problem-standard-r-workflow"&gt;The Problem: Standard R
Workflow&lt;/h3&gt;
&lt;p&gt;Consider an analysis of R’s airquality data set,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;head(airquality)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  Ozone Solar.R Wind Temp Month Day Temp.Celsius
1    41     190  7.4   67     5   1     19.44444
2    36     118  8.0   72     5   2     22.22222
3    12     149 12.6   74     5   3     23.33333
4    18     313 11.5   62     5   4     16.66667
5    NA      NA 14.3   56     5   5     13.33333
6    28      NA 14.9   66     5   6     18.88889&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where we want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a new column, Temp.Celsius, converting temperatures from
Fahrenheit to Celsius.&lt;/li&gt;
&lt;li&gt;Fit a linear model predicting Ozone based on temperature.&lt;/li&gt;
&lt;li&gt;Visualize the data alongside the model fit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s how the workflow might look using standard R:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ggplot2)

# Step 1: Prepare the data
airquality$Temp.Celsius &amp;lt;- (airquality$Temp - 32) * 5 / 9

# Step 2: Fit a linear model
model &amp;lt;- lm(Ozone ~ Temp.Celsius, data = airquality)

# Step 3: Generate the plot
coeffs &amp;lt;- coefficients(model)
ggplot(airquality) +
  geom_point(aes(Temp.Celsius, Ozone)) +
  geom_abline(intercept = coeffs[1], slope = coeffs[2]) +
  labs(title = &amp;quot;Linear model fit&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file697c27af2ea4_files/figure-html/standard-workflow-1.png" width="672" /&gt;&lt;/p&gt;
&lt;p&gt;While functional, this approach has clear drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Manual Dependency Management: Each step depends on outputs from the
previous steps, which must be tracked manually.&lt;/li&gt;
&lt;li&gt;Limited Reusability: Modifying or extending the workflow requires
substantial effort and risks introducing errors.&lt;/li&gt;
&lt;li&gt;Cluttered Code: With all operations in a single script, the overall
structure of the workflow becomes unclear.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-pipeflow-solution-modular-and-manageable"&gt;The {pipeflow}
Solution: Modular and Manageable&lt;/h3&gt;
&lt;p&gt;{pipeflow} addresses these challenges by organizing workflows into
modular, dependency-aware steps. Let’s rewrite the same workflow using
{pipeflow}.&lt;/p&gt;
&lt;h4 id="step-1-initialize-the-pipeline"&gt;Step 1: Initialize the
Pipeline&lt;/h4&gt;
&lt;p&gt;First, we create a pipeline named “my-pipeline” and load the
airquality dataset as input:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(pipeflow)

pip &amp;lt;- Pipeline$new(&amp;quot;my-pipeline&amp;quot;, data = airquality)&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="step-2-add-a-data-preparation-step"&gt;Step 2: Add a Data
Preparation Step&lt;/h4&gt;
&lt;p&gt;Next, we add a step to calculate Temp.Celsius:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$add(
  &amp;quot;data_prep&amp;quot;,
  function(data = ~data) {
    replace(data, &amp;quot;Temp.Celsius&amp;quot;, (data[, &amp;quot;Temp&amp;quot;] - 32) * 5 / 9)
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="step-3-fit-a-linear-model"&gt;Step 3: Fit a Linear Model&lt;/h4&gt;
&lt;p&gt;We add another step to fit a linear model using the transformed
data:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$add(
  &amp;quot;model_fit&amp;quot;,
  function(data = ~data_prep, xVar = &amp;quot;Temp.Celsius&amp;quot;) {
    lm(paste(&amp;quot;Ozone ~&amp;quot;, xVar), data = data)
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="step-4-visualize-the-model-fit"&gt;Step 4: Visualize the Model
Fit&lt;/h4&gt;
&lt;p&gt;Finally, we create a visualization step that uses the outputs from
&lt;code&gt;model_fit&lt;/code&gt; and &lt;code&gt;data_prep&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$add(
  &amp;quot;model_plot&amp;quot;,
  function(
    model = ~model_fit,
    data = ~data_prep,
    xVar = &amp;quot;Temp.Celsius&amp;quot;,
    title = &amp;quot;Linear model fit&amp;quot;
  ) {
    coeffs &amp;lt;- coefficients(model)
    ggplot(data) +
      geom_point(aes(.data[[xVar]], .data[[&amp;quot;Ozone&amp;quot;]])) +
      geom_abline(intercept = coeffs[1], slope = coeffs[2]) +
      labs(title = title)
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can run the pipeline and inspect the model plot:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$run()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;INFO  [2024-12-23 10:32:10.780] Start run of &amp;#39;my-pipeline&amp;#39; pipeline:
INFO  [2024-12-23 10:32:10.781] Step 1/4 data
INFO  [2024-12-23 10:32:10.784] Step 2/4 data_prep
INFO  [2024-12-23 10:32:10.786] Step 3/4 model_fit
INFO  [2024-12-23 10:32:10.789] Step 4/4 model_plot
INFO  [2024-12-23 10:32:10.795] Finished execution of steps.
INFO  [2024-12-23 10:32:10.795] Done.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$get_out(&amp;quot;model_plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file697c27af2ea4_files/figure-html/run-Pipeline-1.png" alt="model-plot" width="672" /&gt;&lt;/p&gt;
&lt;h3 id="why-pipeflow"&gt;Why {pipeflow}?&lt;/h3&gt;
&lt;p&gt;Here are the key advantages of using {pipeflow} over the standard
approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Dependency Management: Dependencies between steps are
handled automatically using the ~ operator to reference previous steps
-&amp;gt; No manual tracking of intermediate variables.&lt;/li&gt;
&lt;li&gt;Modularity: Each step is independent, making pipelines easier to
debug and modify.&lt;/li&gt;
&lt;li&gt;Flexibility: Parameters can be dynamically updated without affecting
the rest of the pipeline and steps that depend on modified inputs are
automatically rerun.&lt;/li&gt;
&lt;li&gt;Visualization: {pipeflow} supports graphical representations of
pipelines for a clear view of the workflow structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="visualizing-the-pipeline"&gt;Visualizing the Pipeline&lt;/h4&gt;
&lt;p&gt;With {pipeflow}, you can easily visualize your pipeline using the
visNetwork package to produce a diagram showing the flow from
&lt;code&gt;data&lt;/code&gt; to &lt;code&gt;data_prep&lt;/code&gt;, &lt;code&gt;model_fit&lt;/code&gt;, and
&lt;code&gt;model_plot&lt;/code&gt;, making the workflow immediately
understandable.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(visNetwork)
do.call(visNetwork, args = pip$get_graph()) |&amp;gt;
    visHierarchicalLayout(direction = &amp;quot;LR&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id="htmlwidget-cb620f2ef3b027e390f4" style="width:672px;height:100px;" class="visNetwork html-widget"&gt;&lt;/div&gt;
&lt;script type="application/json" data-for="htmlwidget-cb620f2ef3b027e390f4"&gt;{"x":{"nodes":{"id":[1,2,3,4],"label":["data","data_prep","model_fit","model_plot"],"group":["data","data_prep","model_fit","model_plot"],"shape":["database","database","box","box"],"color":["lightgreen","lightgreen","lightgreen","lightgreen"],"title":["&lt;p&gt;&lt;\/p&gt;","&lt;p&gt;&lt;\/p&gt;","&lt;p&gt;&lt;\/p&gt;","&lt;p&gt;&lt;\/p&gt;"]},"edges":{"from":[1,2,2,3],"to":[2,3,4,4],"arrows":["to","to","to","to"]},"nodesToDataframe":true,"edgesToDataframe":true,"options":{"width":"100%","height":"100%","nodes":{"shape":"dot"},"manipulation":{"enabled":false},"layout":{"hierarchical":{"enabled":true,"direction":"LR"}}},"groups":["data","data_prep","model_fit","model_plot"],"width":null,"height":100,"idselection":{"enabled":false},"byselection":{"enabled":false},"main":null,"submain":null,"footer":null,"background":"rgba(0, 0, 0, 0)"},"evals":[],"jsHooks":[]}&lt;/script&gt;
&lt;h4 id="ensuring-integrity"&gt;Ensuring Integrity&lt;/h4&gt;
&lt;p&gt;{pipeflow} also verifies pipeline integrity at definition time. For
example, trying to reference a non-existent step triggers an error:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$add(
  &amp;quot;invalid_step&amp;quot;,
  function(data = ~non_existent) {
    data
  }
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error: step &amp;#39;invalid_step&amp;#39;: dependency &amp;#39;non_existent&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proactive error-checking ensures that pipelines remain robust
and free from misconfigurations.&lt;/p&gt;
&lt;h3 id="dynamic-updates"&gt;Dynamic Updates&lt;/h3&gt;
&lt;p&gt;One of {pipeflow}’s standout features is its ability to dynamically
update parameters and rerun only the affected steps. For example:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Change the predictor variable
pip$set_params(list(xVar = &amp;quot;Solar.R&amp;quot;))
pip$run()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;INFO  [2024-12-23 10:32:11.085] Start run of &amp;#39;my-pipeline&amp;#39; pipeline:
INFO  [2024-12-23 10:32:11.086] Step 1/4 data - skip &amp;#39;done&amp;#39; step
INFO  [2024-12-23 10:32:11.087] Step 2/4 data_prep - skip &amp;#39;done&amp;#39; step
INFO  [2024-12-23 10:32:11.088] Step 3/4 model_fit
INFO  [2024-12-23 10:32:11.090] Step 4/4 model_plot
INFO  [2024-12-23 10:32:11.096] Finished execution of steps.
INFO  [2024-12-23 10:32:11.096] Done.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only the steps depending on &lt;code&gt;xVar&lt;/code&gt; (i.e.,
&lt;code&gt;model_fit&lt;/code&gt; and &lt;code&gt;model_plot&lt;/code&gt;) are rerun.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Update input data using only the first 10 rows
pip$set_data(airquality[1:10, ])
pip$run()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;INFO  [2024-12-23 10:32:11.122] Start run of &amp;#39;my-pipeline&amp;#39; pipeline:
INFO  [2024-12-23 10:32:11.123] Step 1/4 data
INFO  [2024-12-23 10:32:11.126] Step 2/4 data_prep
INFO  [2024-12-23 10:32:11.128] Step 3/4 model_fit
INFO  [2024-12-23 10:32:11.131] Step 4/4 model_plot
INFO  [2024-12-23 10:32:11.136] Finished execution of steps.
INFO  [2024-12-23 10:32:11.136] Done.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The entire pipeline is rerun, as all steps depend on the input
data.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;# Update the plot title
pip$set_params(list(title = &amp;quot;Updated Plot Title&amp;quot;))
pip$run()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;INFO  [2024-12-23 10:32:11.164] Start run of &amp;#39;my-pipeline&amp;#39; pipeline:
INFO  [2024-12-23 10:32:11.165] Step 1/4 data - skip &amp;#39;done&amp;#39; step
INFO  [2024-12-23 10:32:11.166] Step 2/4 data_prep - skip &amp;#39;done&amp;#39; step
INFO  [2024-12-23 10:32:11.166] Step 3/4 model_fit - skip &amp;#39;done&amp;#39; step
INFO  [2024-12-23 10:32:11.167] Step 4/4 model_plot
INFO  [2024-12-23 10:32:11.173] Finished execution of steps.
INFO  [2024-12-23 10:32:11.173] Done.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only the &lt;code&gt;model_plot&lt;/code&gt; step is rerun. Let’s inspect the
final result with the updated x-axis variable and plot title:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;pip$get_out(&amp;quot;model_plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="file697c27af2ea4_files/figure-html/unnamed-chunk-8-1.png" alt="updated-plot" width="672" /&gt;&lt;/p&gt;
&lt;h3 id="pipeflow-vs.-targets"&gt;{pipeflow} vs. targets&lt;/h3&gt;
&lt;p&gt;The R ecosystem includes powerful tools like &lt;a
href="https://CRAN.R-project.org/package=targets"&gt;targets&lt;/a&gt;, designed
for advanced, reproducible workflows. However, &lt;a
href="https://CRAN.R-project.org/package=targets"&gt;targets&lt;/a&gt; may
involve additional setup and a steeper learning curve while {pipeflow}
emphasizes simplicity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick Setup: Define and run a pipeline in just a few steps.&lt;/li&gt;
&lt;li&gt;Intuitive Design: Seamlessly manage dependencies without extra
configuration.&lt;/li&gt;
&lt;li&gt;Dynamic Updates: Modify parameters and inputs on the fly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While targets excels in highly complex workflows, {pipeflow} offers a
versatile solution that’s both beginner-friendly but still capable of
supporting demanding tasks.&lt;/p&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;{pipeflow} transforms the way you build and manage data analysis
workflows in R. By automating dependency tracking, ensuring pipeline
integrity, and enabling dynamic updates, it reduces complexity and
enhances productivity. Whether you’re working on a simple analysis or a
large-scale project, {pipeflow} helps you focus on insights rather than
infrastructure.&lt;/p&gt;
&lt;p&gt;Ready to give {pipeflow} a try? Explore the &lt;a
href="https://rpahl.github.io/pipeflow/index.html"&gt;documentation&lt;/a&gt; to
learn more and start building smarter pipelines today!&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>55c9fa5100f7211f1f9b011c5f00a463</distill:md5>
      <category>data analysis workflows</category>
      <category>pipeline tools</category>
      <category>reproducible research</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/2024-12-21-introducing-pipeflow</guid>
      <pubDate>Sat, 21 Dec 2024 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/2024-12-21-introducing-pipeflow/logo.png" medium="image" type="image/png" width="196" height="145"/>
    </item>
    <item>
      <title>Nested unit tests with testthat</title>
      <link>https://rpahl.github.io/r-some-blog/posts/2024-10-07-nested-unit-tests-with-testthat</link>
      <description>The testthat package is the most widely used tool for unit testing in R.
However, many users may not be aware of the possibility to nest test blocks
within each other. In this post, I demonstrate how this underused feature
provides a great way to structure and manage your unit tests.</description>
      <category>testthat</category>
      <category>unit testing</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/2024-10-07-nested-unit-tests-with-testthat</guid>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/2024-10-07-nested-unit-tests-with-testthat/nested-tests.png" medium="image" type="image/png" width="1024" height="1024"/>
    </item>
    <item>
      <title>Readable code with base R (part 2)</title>
      <link>https://rpahl.github.io/r-some-blog/posts/readable-code-part2</link>
      <description>It's been a while since my first on this topic.
Nevertheless, it remains an important issue as (in my humble view) there is
still too much code appearing in R packages that lacks good readability. 
So I hope this post helps to promote the beauty of readable code.</description>
      <category>base R</category>
      <category>coding style</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/readable-code-part2</guid>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/readable-code-part2/distill-preview.png" medium="image" type="image/png" width="569" height="322"/>
    </item>
    <item>
      <title>container: v1.0.0 on CRAN</title>
      <link>https://rpahl.github.io/r-some-blog/posts/container1.0</link>
      <description>The update contains some breaking changes and brings a lot of new features
and operators, which markedly improves using containers in both
interactive R sessions and code development.
Also there is a new class dict.table to support the data.table package.</description>
      <category>container</category>
      <category>list</category>
      <category>R package</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/container1.0</guid>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/container1.0/distill-preview.png" medium="image" type="image/png" width="602" height="415"/>
    </item>
    <item>
      <title>Why I don't use R Markdown's ref.label</title>
      <link>https://rpahl.github.io/r-some-blog/posts/ref-label</link>
      <description>R Markdown provides the chunk option `ref.label` to 
reuse chunks. In this post, I'll show potential problems with this approach
and present an easy and safe alternative.</description>
      <category>R-Markdown</category>
      <category>knitr</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/ref-label</guid>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/ref-label/distill-preview.png" medium="image" type="image/png" width="279" height="117"/>
    </item>
    <item>
      <title>Quicker knitr kables in RStudio notebook</title>
      <link>https://rpahl.github.io/r-some-blog/posts/kable_if</link>
      <description>In this post a simple RStudio hack is presented on how to display tables
produced via knitr kable efficiently in the RStudio session.</description>
      <category>R-Markdown</category>
      <category>knitr</category>
      <category>R-Studio</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/kable_if</guid>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/kable_if/distill-preview.png" medium="image" type="image/png" width="670" height="468"/>
    </item>
    <item>
      <title>My R Style Guide</title>
      <link>https://rpahl.github.io/r-some-blog/posts/r-style-guide</link>
      <description>This is my take on an R style guide. As such, this is going to be a longer 
post in the hope that is useful to some people out there.</description>
      <category>coding style</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/r-style-guide</guid>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/r-style-guide/distill-preview.png" medium="image" type="image/png" width="258" height="191"/>
    </item>
    <item>
      <title>Readable code with base R (part 1)</title>
      <link>https://rpahl.github.io/r-some-blog/posts/readable-code-part1</link>
      <description>Producing readable R code is of great importance, especially if there is a 
chance that you will share your code with people other than your future self.
In this series of blog posts, I will present some (often underused) base R 
functions for this purpose.</description>
      <category>base R</category>
      <category>coding style</category>
      <guid>https://rpahl.github.io/r-some-blog/posts/readable-code-part1</guid>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      <media:content url="https://rpahl.github.io/r-some-blog/posts/readable-code-part1/distill-preview.png" medium="image" type="image/png" width="569" height="322"/>
    </item>
  </channel>
</rss>
